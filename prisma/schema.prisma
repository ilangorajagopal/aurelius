datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id             String           @id @default(cuid())
  title          String
  content        String           @db.MediumText
  published      Boolean?         @default(false)
  author         User             @relation(fields: [author_id], references: [id])
  author_id      String
  created_at     DateTime         @default(now())
  updated_at     DateTime?        @default(now()) @updatedAt
  word_count     Int
  share_id       String
  WritingSession WritingSession[]
}

model WritingSession {
  id      String  @id @default(cuid())
  post    Post    @relation(fields: [post_id], references: [id])
  post_id String
  goal    String
  target  Int
  result  Int
  User    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  writingSessions WritingSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
